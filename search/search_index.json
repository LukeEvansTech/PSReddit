{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PSReddit","text":""},{"location":"#synopsis","title":"Synopsis","text":"<p>PSReddit is a PowerShell module for interacting with the Reddit API.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>You are currently viewing the online documentation at https://lukeevanstech.github.io/PSReddit/</p>"},{"location":"#description","title":"Description","text":"<p>This module provides cmdlets to authenticate with Reddit, retrieve posts from subreddits and users, and interact with the Reddit API directly from PowerShell.</p>"},{"location":"#why","title":"Why","text":"<p>To provide a simple and PowerShell-idiomatic way to automate Reddit interactions.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>PowerShell 7 or later. A Reddit account and API credentials (client ID, client secret).</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>Install-Module -Name PSReddit\n</code></pre>"},{"location":"#quick-start","title":"Quick start","text":""},{"location":"#example-1-get-subreddit-posts","title":"Example 1: Get subreddit posts","text":"<pre><code>Get-RedditSubredditPost -Subreddit 'PowerShell' -Count 10\n</code></pre>"},{"location":"#example-2-get-user-posts","title":"Example 2: Get user posts","text":"<pre><code>Get-RedditUserPost -Username 'LukeEvansTech' -Sort Top -LastWeek -Count 5\n</code></pre>"},{"location":"#cmdlet-reference","title":"Cmdlet Reference","text":"<ul> <li>Get-RedditOAuthToken \u2013 Retrieves an OAuth2 bearer token from Reddit.</li> <li>Get-RedditSubredditPost \u2013 Retrieves posts from one or more subreddits.</li> <li>Get-RedditUserPost \u2013 Retrieves posts submitted by specific Reddit users. +For full details including parameter tables and usage examples, refer to each cmdlet\u2019s documentation page.</li> </ul>"},{"location":"#author","title":"Author","text":"<p>Luke Evans</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":"<ul> <li>TBD</li> </ul>"},{"location":"CHANGELOG/#001","title":"[0.0.1]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"DEVELOPMENT/","title":"Development Guide","text":"<p>This guide provides instructions for building, testing, and developing the PSReddit module.</p>"},{"location":"DEVELOPMENT/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>PowerShell 7+: The module and build scripts require PowerShell 7 or later.</li> <li>Invoke-Build Module: Used for automating build tasks. Install it using:     <pre><code>Install-Module Invoke-Build -Force\n</code></pre></li> <li>Pester Module: Used for running tests. The build script requires a version between 5.2.2 and 5.99.99. Install a compatible version (e.g., 5.5.0):     <pre><code>Install-Module Pester -RequiredVersion 5.5.0 -Force\n</code></pre></li> <li>(Optional) Reddit API Credentials: For running integration tests, you need a Reddit application Client ID and Secret. Set these as environment variables:     <pre><code>$env:REDDIT_CLIENT_ID = 'your-client-id'\n$env:REDDIT_CLIENT_SECRET = 'your-client-secret'\n</code></pre></li> </ul>"},{"location":"DEVELOPMENT/#build-process","title":"Build Process","text":"<p>The build process is managed by <code>Invoke-Build</code> using the <code>src/PSReddit.build.ps1</code> script. All build commands should be run from the <code>src/</code> directory.</p> <pre><code>cd src\n</code></pre>"},{"location":"DEVELOPMENT/#full-build","title":"Full Build","text":"<p>Runs the default sequence: Clean, Validate Requirements, Import Module Manifest, Formatting Check, Analyze, Test (Unit), Create Help, Build, Integration Test, Archive.</p> <pre><code>Invoke-Build\n</code></pre> <p>The final module output will be placed in the <code>src/Artifacts/PSReddit/</code> directory, and a zipped archive in <code>src/Archive/</code>.</p>"},{"location":"DEVELOPMENT/#build-without-integration-tests","title":"Build Without Integration Tests","text":"<p>Runs the full build process except for the integration tests.</p> <pre><code>Invoke-Build BuildNoIntegration\n</code></pre>"},{"location":"DEVELOPMENT/#testing","title":"Testing","text":""},{"location":"DEVELOPMENT/#run-unit-tests","title":"Run Unit Tests","text":"<p>Runs static analysis (PSScriptAnalyzer) and Pester unit tests located in <code>src/Tests/Unit/</code>. Also generates code coverage reports.</p> <p><pre><code>Invoke-Build TestLocal\n</code></pre> Or, to run only the Pester unit tests without analysis: <pre><code>Invoke-Build Test\n</code></pre> Test results (NUnit XML) and code coverage reports (JaCoCo XML) are saved in <code>src/Artifacts/</code>.</p>"},{"location":"DEVELOPMENT/#run-integration-tests","title":"Run Integration Tests","text":"<p>Runs Pester integration tests located in <code>src/Tests/Integration/</code>. These tests interact with the live Reddit API and require the <code>REDDIT_CLIENT_ID</code> and <code>REDDIT_CLIENT_SECRET</code> environment variables to be set.</p> <pre><code>Invoke-Build IntegrationTest\n</code></pre>"},{"location":"DEVELOPMENT/#code-coverage-for-vscode","title":"Code Coverage (for VSCode)","text":"<p>To generate a <code>cov.xml</code> file at the project root compatible with the \"Coverage Gutters\" VSCode extension:</p> <pre><code>Invoke-Build DevCC\n</code></pre>"},{"location":"DEVELOPMENT/#documentation","title":"Documentation","text":""},{"location":"DEVELOPMENT/#generate-help-files","title":"Generate Help Files","text":"<p>To regenerate the markdown documentation and external help XML file (used by <code>Get-Help</code>):</p> <p><pre><code>Invoke-Build HelpLocal\n</code></pre> This runs the <code>Clean</code>, <code>ImportModuleManifest</code>, and <code>CreateHelpStart</code> tasks, including markdown and external help generation. The generated markdown files are placed in <code>src/Artifacts/docs/</code> and the XML help file in <code>src/Artifacts/en-US/</code>.</p>"},{"location":"DEVELOPMENT/#preview-documentation-site","title":"Preview Documentation Site","text":"<p>This project uses MkDocs with the Material theme. To preview the documentation site locally:</p> <ol> <li>Ensure you have Python and pip installed.</li> <li>Install MkDocs and the Material theme:     <pre><code>pip install mkdocs mkdocs-material\n</code></pre></li> <li>Navigate to the project root directory (where <code>mkdocs.yml</code> is located).</li> <li>Run the MkDocs development server:     <pre><code>mkdocs serve\n</code></pre></li> <li>Open your browser to <code>http://127.0.0.1:8000</code>.</li> </ol>"},{"location":"DEVELOPMENT/#cleaning","title":"Cleaning","text":"<p>To remove the <code>src/Artifacts</code> and <code>src/Archive</code> directories:</p> <p>```powershell Invoke-Build Clean</p>"},{"location":"Get-RedditOAuthToken/","title":"Get-RedditOAuthToken","text":""},{"location":"Get-RedditOAuthToken/#synopsis","title":"SYNOPSIS","text":"<p>Retrieves an OAuth2 bearer token from Reddit.</p>"},{"location":"Get-RedditOAuthToken/#syntax","title":"SYNTAX","text":"<pre><code>Get-RedditOAuthToken [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Get-RedditOAuthToken/#description","title":"DESCRIPTION","text":"<p>Authenticates with Reddit using client credentials from environment variables (REDDIT_CLIENT_ID, REDDIT_CLIENT_SECRET).</p>"},{"location":"Get-RedditOAuthToken/#examples","title":"EXAMPLES","text":""},{"location":"Get-RedditOAuthToken/#example-1","title":"EXAMPLE 1","text":"<pre><code>$token = Get-RedditOAuthToken\n</code></pre>"},{"location":"Get-RedditOAuthToken/#parameters","title":"PARAMETERS","text":""},{"location":"Get-RedditOAuthToken/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutBuffer, -OutVariable, -PipelineVariable, -Verbose, -WarningAction, -WarningVariable, and -ProgressAction.  For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</p>"},{"location":"Get-RedditOAuthToken/#inputs","title":"INPUTS","text":""},{"location":"Get-RedditOAuthToken/#outputs","title":"OUTPUTS","text":""},{"location":"Get-RedditOAuthToken/#notes","title":"NOTES","text":"<p>Requires environment variables REDDIT_CLIENT_ID and REDDIT_CLIENT_SECRET to be set.</p>"},{"location":"Get-RedditOAuthToken/#related-links","title":"RELATED LINKS","text":""},{"location":"Get-RedditSubredditPost/","title":"Get-RedditSubredditPost","text":""},{"location":"Get-RedditSubredditPost/#synopsis","title":"SYNOPSIS","text":"<p>Retrieves posts from one or more subreddits.</p>"},{"location":"Get-RedditSubredditPost/#syntax","title":"SYNTAX","text":"<pre><code>Get-RedditSubredditPost [-Subreddit] &lt;String[]&gt; [[-Sort] &lt;String&gt;] [-LastHour] [-LastDay] [-LastWeek]\n [-LastMonth] [-LastYear] [-AllTime] [[-Count] &lt;Int32&gt;] [-DebugApi]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Get-RedditSubredditPost/#description","title":"DESCRIPTION","text":"<p>Uses Reddit's API and OAuth2 to fetch posts from specified subreddit(s). You can specify the sort type (Top, New, Rising, Hot, Controversial). Timeframe switches (-LastHour, -LastDay, etc.) only apply to 'Top' and 'Controversial' sorts, per Reddit API rules. Only one timeframe or sort can be used per call, as the Reddit API does not support combining them. Use -Count to specify how many posts to retrieve (max 100).</p>"},{"location":"Get-RedditSubredditPost/#examples","title":"EXAMPLES","text":""},{"location":"Get-RedditSubredditPost/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-RedditSubredditPost -Subreddit 'powershell' -Sort New -Count 10\n</code></pre>"},{"location":"Get-RedditSubredditPost/#example-2","title":"EXAMPLE 2","text":"<pre><code>Get-RedditSubredditPost -Subreddit 'powershell' -Sort Top -LastWeek\n</code></pre>"},{"location":"Get-RedditSubredditPost/#parameters","title":"PARAMETERS","text":""},{"location":"Get-RedditSubredditPost/#-subreddit","title":"-Subreddit","text":"<p>One or more subreddit names (without /r/).</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-sort","title":"-Sort","text":"<p>Sort type: Top, New, Rising, Hot, or Controversial. Default is Top.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: Top\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-lasthour","title":"-LastHour","text":"<p>Retrieve posts from the last hour (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-lastday","title":"-LastDay","text":"<p>Retrieve posts from the last day (default; Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-lastweek","title":"-LastWeek","text":"<p>Retrieve posts from the last week (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-lastmonth","title":"-LastMonth","text":"<p>Retrieve posts from the last month (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-lastyear","title":"-LastYear","text":"<p>Retrieve posts from the last year (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-alltime","title":"-AllTime","text":"<p>Retrieve posts from all time (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-count","title":"-Count","text":"<p>Number of posts to retrieve per subreddit (max 100, default 25).</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: 25\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#-debugapi","title":"-DebugApi","text":"<p>If specified, outputs verbose debugging information about the API requests and responses.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditSubredditPost/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutBuffer, -OutVariable, -PipelineVariable, -Verbose, -WarningAction, -WarningVariable, and -ProgressAction.  For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</p>"},{"location":"Get-RedditSubredditPost/#inputs","title":"INPUTS","text":""},{"location":"Get-RedditSubredditPost/#outputs","title":"OUTPUTS","text":""},{"location":"Get-RedditSubredditPost/#notes","title":"NOTES","text":"<p>Reddit's API only allows one sort and (if applicable) one timeframe per request. Timeframes only apply to 'Top' and 'Controversial' sorts. Other sorts (New, Rising, Hot) ignore timeframe and always return the latest/rising/hot posts.</p>"},{"location":"Get-RedditSubredditPost/#related-links","title":"RELATED LINKS","text":""},{"location":"Get-RedditUserPost/","title":"Get-RedditUserPost","text":""},{"location":"Get-RedditUserPost/#synopsis","title":"SYNOPSIS","text":"<p>Retrieves posts submitted by specific Reddit users.</p>"},{"location":"Get-RedditUserPost/#syntax","title":"SYNTAX","text":"<pre><code>Get-RedditUserPost [-Username] &lt;String[]&gt; [[-Sort] &lt;String&gt;] [-LastHour] [-LastDay] [-LastWeek] [-LastMonth]\n [-LastYear] [-AllTime] [[-Count] &lt;Int32&gt;] [-DebugApi]\n [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"Get-RedditUserPost/#description","title":"DESCRIPTION","text":"<p>Uses Reddit's API and OAuth2 to fetch posts made by specified Reddit user(s). You can specify the sort type (Top, New, Hot, Controversial) and limit the number of posts. Timeframe switches (-LastHour, -LastDay, etc.) apply to 'Top' and 'Controversial' sorts, per Reddit API rules.</p>"},{"location":"Get-RedditUserPost/#examples","title":"EXAMPLES","text":""},{"location":"Get-RedditUserPost/#example-1","title":"EXAMPLE 1","text":"<pre><code>Get-RedditUserPost -Username 'LukeEvansTech' -Sort New -Count 10\n</code></pre>"},{"location":"Get-RedditUserPost/#example-2","title":"EXAMPLE 2","text":"<pre><code>Get-RedditUserPost -Username 'LukeEvansTech' -Sort Top -LastWeek\n</code></pre>"},{"location":"Get-RedditUserPost/#parameters","title":"PARAMETERS","text":""},{"location":"Get-RedditUserPost/#-username","title":"-Username","text":"<p>One or more Reddit usernames (without u/).</p> <pre><code>Type: String[]\nParameter Sets: (All)\nAliases:\n\nRequired: True\nPosition: 1\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-sort","title":"-Sort","text":"<p>Sort type: Top, New, Hot, or Controversial. Default is New.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 2\nDefault value: New\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-lasthour","title":"-LastHour","text":"<p>Retrieve posts from the last hour (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-lastday","title":"-LastDay","text":"<p>Retrieve posts from the last day (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-lastweek","title":"-LastWeek","text":"<p>Retrieve posts from the last week (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-lastmonth","title":"-LastMonth","text":"<p>Retrieve posts from the last month (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-lastyear","title":"-LastYear","text":"<p>Retrieve posts from the last year (Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-alltime","title":"-AllTime","text":"<p>Retrieve posts from all time (default; Top/Controversial only).</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-count","title":"-Count","text":"<p>Number of posts to retrieve per user (max 100, default 25).</p> <pre><code>Type: Int32\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 3\nDefault value: 25\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#-debugapi","title":"-DebugApi","text":"<p>If specified, outputs verbose debugging information about the API requests and responses.</p> <pre><code>Type: SwitchParameter\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: Named\nDefault value: False\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"Get-RedditUserPost/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutBuffer, -OutVariable, -PipelineVariable, -Verbose, -WarningAction, -WarningVariable, and -ProgressAction.  For more information, see about_CommonParameters (http://go.microsoft.com/fwlink/?LinkID=113216).</p>"},{"location":"Get-RedditUserPost/#inputs","title":"INPUTS","text":""},{"location":"Get-RedditUserPost/#outputs","title":"OUTPUTS","text":""},{"location":"Get-RedditUserPost/#notes","title":"NOTES","text":"<p>Reddit's API only allows one sort and (if applicable) one timeframe per request. Timeframes only apply to 'Top' and 'Controversial' sorts.</p>"},{"location":"Get-RedditUserPost/#related-links","title":"RELATED LINKS","text":""},{"location":"PSReddit/","title":"PSReddit Module","text":""},{"location":"PSReddit/#description","title":"Description","text":"<p>A PowerShell module (PSReddit) for authenticating with Reddit and retrieving posts.</p>"},{"location":"PSReddit/#psreddit-cmdlets","title":"PSReddit Cmdlets","text":""},{"location":"PSReddit/#get-redditoauthtoken","title":"Get-RedditOAuthToken","text":"<p>Retrieves an OAuth2 bearer token from Reddit.</p>"},{"location":"PSReddit/#get-redditsubredditpost","title":"Get-RedditSubredditPost","text":"<p>Retrieves posts from one or more subreddits.</p>"},{"location":"PSReddit/#get-reddituserpost","title":"Get-RedditUserPost","text":"<p>Retrieves posts submitted by specific Reddit users.</p>"},{"location":"WORKFLOWS/","title":"GitHub Workflows","text":"<p>PSReddit uses GitHub Actions to automate testing, documentation deployment, and module publishing. Below are the workflows and their triggers:</p>"},{"location":"WORKFLOWS/#testing","title":"Testing","text":"<ul> <li>PSReddit - Test on Linux (<code>.github/workflows/psreddit-test-on-linux.yml</code>): runs on pull requests to validate module on Ubuntu.</li> <li>PSReddit - Test on macOS (<code>.github/workflows/psreddit-test-on-macos.yml</code>): runs on pull requests to validate module on macOS.</li> <li>PSReddit - Test on Windows (<code>.github/workflows/psreddit-test-on-windows.yml</code>): runs on pull requests to validate module on Windows.</li> </ul>"},{"location":"WORKFLOWS/#documentation-deployment","title":"Documentation Deployment","text":"<ul> <li>PSReddit - Deploy Docs (<code>.github/workflows/psreddit-deploy-docs.yml</code>): runs on push to <code>main</code> to build and publish the MkDocs site.</li> </ul>"},{"location":"WORKFLOWS/#module-publishing","title":"Module Publishing","text":"<ul> <li>PSReddit - Publish Module (<code>.github/workflows/psreddit-publish-module.yml</code>): runs on new release publishes to push the module to the PowerShell Gallery.</li> </ul>"}]}